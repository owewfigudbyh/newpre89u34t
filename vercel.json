from flask import Flask, render_template, request, jsonify, redirect, url_for
import sqlite3
import requests
import os
import logging
from bot import bot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, date
from utils.save_avatar import save_avatar
import random

logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s:%(name)s: %(message)s'
)
logger = logging.getLogger("blomblom-flask")
SUPERADMIN_ID = "350691086"
BOT_NOTIFY_URL = "https://c9434d554543.ngrok-free.app/notify"
BOT_ROLE_URL = "https://c9434d554543.ngrok-free.app/notify_role"
BOT_TOKEN = "8250860304:AAFbp2PMZom6PbYqvNz_Y1DEQEOSRHeryWU"

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'static/avatars'

def init_db():
    conn = sqlite3.connect('static/users.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            telegram_id TEXT PRIMARY KEY,
            last_name TEXT,
            first_name TEXT,
            middle_name TEXT,
            username TEXT,
            birthdate TEXT,
            city TEXT,
            district TEXT,
            phone TEXT,
            skills TEXT,
            role TEXT,
            avatar TEXT,
            mute_mode INTEGER DEFAULT 0,
            mute_remind_at TEXT,
            mute_remind_stage INTEGER DEFAULT 0
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS jobs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            job_number TEXT,
            customer_name TEXT,
            customer_phone TEXT,
            job_type TEXT,
            job_description TEXT,
            hour_rate INTEGER,
            min_rate INTEGER,
            city TEXT,
            district TEXT,
            cargo_name TEXT,
            people_count INTEGER,
            work_hours INTEGER,
            address_a TEXT,
            floor_a INTEGER,
            elevator_a TEXT,
            elevator_type_a TEXT,
            address_b TEXT,
            floor_b INTEGER,
            elevator_b TEXT,
            elevator_type_b TEXT,
            start_date TEXT,
            start_time TEXT,
            logistics TEXT,
            logistics_to_addr TEXT,
            payment_type TEXT,
            status TEXT,
            created_by TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS job_accepts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            job_id INTEGER,
            worker_telegram_id TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def get_role(telegram_id):
    conn = sqlite3.connect('static/users.db')
    c = conn.cursor()
    c.execute('SELECT role FROM users WHERE telegram_id=?', (telegram_id,))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

def generate_job_number(city_code, date):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYMMDD
    date_str = date.strftime('%y%m%d')  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 250812
    # –°—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ –≥–æ—Ä–æ–¥
    conn = sqlite3.connect('static/users.db')
    c = conn.cursor()
    # –ò—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '843-250812-'
    prefix = f"{city_code}-{date_str}-"
    c.execute("SELECT COUNT(*) FROM jobs WHERE job_number LIKE ?", (f"{prefix}%",))
    count_today = c.fetchone()[0]
    conn.close()
    order_num = count_today + 1
    job_number = f"{city_code}-{date_str}-{order_num}"
    return job_number
# -------------------- –¢–ï–ö–°–¢–´ –ó–ê–Ø–í–û–ö --------------------

def build_loader_executor_text(
    job_number, job_description, hour_rate, min_rate, city, district,
    start_date, start_time,
    address_a, floor_a, elevator_a, elevator_type_a,
    address_b=None, floor_b=None, elevator_b=None, elevator_type_b=None,
    logistics=None, payment_type=None
):
    def val(v): return v if v not in [None, ""] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    text = (
        f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ {val(job_number)}</b> üöÄ\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:</b> üìù\n{val(job_description)}\n\n"
        f"<b>–°—Ç–∞–≤–∫–∞ –≤ —á–∞—Å:</b> üí∞\n{val(hour_rate)} ‚ÇΩ\n\n"
        f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–º–µ–Ω—É:</b> üí∞\n{val(min_rate)} ‚ÇΩ\n\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> üåÜ\n{val(city)}\n\n"
        f"<b>–†–∞–π–æ–Ω:</b>\n{val(district)}\n\n"
    )

    text += (
        f"<b>–ê–¥—Ä–µ—Å –ê:</b> üìç\n{val(address_a)}\n"
        f"–≠—Ç–∞–∂: {val(floor_a)}\n"
        f"–õ–∏—Ñ—Ç: {val(elevator_a)}\n"
        f"–í–∏–¥ –ª–∏—Ñ—Ç–∞: {val(elevator_type_a)}\n\n"
    )

    if address_b and str(address_b).strip():
        text += (
            f"<b>–ê–¥—Ä–µ—Å B:</b> üìç\n{val(address_b)}\n"
            f"–≠—Ç–∞–∂: {val(floor_b)}\n"
            f"–õ–∏—Ñ—Ç: {val(elevator_b)}\n"
            f"–í–∏–¥ –ª–∏—Ñ—Ç–∞: {val(elevator_type_b)}\n\n"
            f"<b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –º–µ–∂–¥—É –∞–¥—Ä–µ—Å–∞–º:</b> üõ∏\n{val(logistics)}\n\n"
        )

    text += (
        f"<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b> üìÖ\n{val(start_date)}\n\n"
        f"<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b> üïó\n{val(start_time)}\n\n"
        f"<b>–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:</b> üí≥\n{val(payment_type)}\n"
    )

    return text

def build_loader_operator_text(
    job_number, customer_name, customer_phone, people_count,
    job_description, hour_rate, min_rate, city, district,
    address_a, floor_a, elevator_a, elevator_type_a,
    address_b=None, floor_b=None, elevator_b=None, elevator_type_b=None,
    logistics=None, start_date=None, start_time=None, payment_type=None,
    worker_name=None, worker_username=None, worker_phone=None, worker_age=None
):
    def val(x):
        return x if x not in [None, ""] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    def tel(x):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –º–æ–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å
        num = str(x).replace("+7", "").replace(" ", "").replace("-", "")
        return f'<a href="tel:+7{num}">+7{num}</a>' if num.isdigit() and len(num) == 10 else val(x)

    text = (
        f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ {val(job_number)}</b> üöÄ\n\n"
        f"<b>–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {val(customer_name)}\n\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {tel(customer_phone)}\n\n"
        f"<b>–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫:</b> {val(people_count)}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:</b> üìù\n{val(job_description)}\n\n"
        f"<b>–°—Ç–∞–≤–∫–∞ –≤ —á–∞—Å:</b> üí∞\n{val(hour_rate)} ‚ÇΩ\n\n"
        f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–º–µ–Ω—É:</b> üí∞\n{val(min_rate)} ‚ÇΩ\n\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> üåÜ\n{val(city)}\n\n"
        f"<b>–†–∞–π–æ–Ω:</b>\n{val(district)}\n\n"
    )

    text += (
        f"<b>–ê–¥—Ä–µ—Å –ê:</b> üìç\n{val(address_a)}\n"
        f"–≠—Ç–∞–∂: {val(floor_a)}\n"
        f"–õ–∏—Ñ—Ç: {val(elevator_a)}\n"
        f"–í–∏–¥ –ª–∏—Ñ—Ç–∞: {val(elevator_type_a)}\n\n"
    )

    if address_b and str(address_b).strip():
        text += (
            f"<b>–ê–¥—Ä–µ—Å B:</b> üìç\n{val(address_b)}\n"
            f"–≠—Ç–∞–∂: {val(floor_b)}\n"
            f"–õ–∏—Ñ—Ç: {val(elevator_b)}\n"
            f"–í–∏–¥ –ª–∏—Ñ—Ç–∞: {val(elevator_type_b)}\n\n"
            f"<b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –º–µ–∂–¥—É –∞–¥—Ä–µ—Å–∞–º:</b> üõ∏\n{val(logistics)}\n\n"
        )

    text += (
        f"<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b> üìÖ\n{val(start_date)}\n\n"
        f"<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b> üïó\n{val(start_time)}\n\n"
        f"<b>–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:</b> üí≥\n{val(payment_type)}\n\n"
    )

    # –ë–ª–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if worker_name:
        text += (
            f"<b>–û—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏–π—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å üßë‚Äçüîß</b>\n\n"
            f"<b>–ò–º—è:</b> üìù\n{val(worker_name)}\n\n"
            f"<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b>\n@{val(worker_username)}\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>\n{tel(worker_phone)}\n\n"
            f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b>\n{val(worker_age)}\n"
        )

    return text

def build_construction_executor_text(
    job_number, job_description, hour_rate, min_rate, work_hours,
    city, district, address_a, logistics_to_addr,
    start_date, start_time, payment_type
):
    def val(v): return v if v not in [None, ""] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    # –î–æ–±–∞–≤–∏–ª –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"logistics_to_addr = '{logistics_to_addr}'")

    text = (
        f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ {val(job_number)}</b> üöÄ\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:</b> üìù\n{val(job_description)}\n\n"
        f"<b>–°—Ç–∞–≤–∫–∞ –≤ —á–∞—Å:</b> üí∞\n{val(hour_rate)} ‚ÇΩ\n\n"
        f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–º–µ–Ω—É:</b> üí∞\n{val(min_rate)} ‚ÇΩ\n\n"
        f"<b>–ö–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:</b> ‚è≥\n{val(work_hours)}\n\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> üåÜ\n{val(city)}\n\n"
        f"<b>–†–∞–π–æ–Ω:</b>\n{val(district)}\n\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> üìç\n{val(address_a)}\n\n"
    )

    if logistics_to_addr and str(logistics_to_addr).strip():
        text += (
            f"<b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –¥–æ –∞–¥—Ä–µ—Å–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ:</b> üõ∏\n{logistics_to_addr}\n\n"
        )

    text += (
        f"<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:</b> üìÖ\n{val(start_date)}\n\n"
        f"<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b> üïó\n{val(start_time)}\n\n"
        f"<b>–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:</b> üí≥\n{val(payment_type)}\n"
    )

    return text
def build_construction_operator_text(
    job_number, customer_name, customer_phone, people_count, job_description,
    hour_rate, min_rate, work_hours, city, district, address_a, logistics_to_addr,
    start_date, start_time, payment_type, worker_name, worker_username, worker_phone, worker_age
):
    def val(v): return v if v not in [None, ""] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    def tel(x):
        num = str(x).replace("+7", "").replace(" ", "").replace("-", "")
        return f'<a href="tel:+7{num}">+7{num}</a>' if num.isdigit() and len(num) == 10 else val(x)

    text = (
        f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ {val(job_number)}</b> üöÄ\n\n"
        f"<b>–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {val(customer_name)}\n\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {tel(customer_phone)}\n\n"
        f"<b>–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫:</b> {val(people_count)}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:</b> üìù\n{val(job_description)}\n\n"
        f"<b>–°—Ç–∞–≤–∫–∞ –≤ —á–∞—Å:</b> üí∞\n{val(hour_rate)} ‚ÇΩ\n\n"
        f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–º–µ–Ω—É:</b> üí∞\n{val(min_rate)} ‚ÇΩ\n\n"
        f"<b>–ö–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:</b> ‚è≥\n{val(work_hours)}\n\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> üèô\n{val(city)}\n\n"
        f"<b>–†–∞–π–æ–Ω :</b>\n{val(district)}\n\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> üìç\n{val(address_a)}\n\n"
    )

    # –ë–ª–æ–∫ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç–æ, –∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞ 'None'
    if logistics_to_addr and str(logistics_to_addr).strip().lower() != "none":
        text += (
            f"<b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –¥–æ –∞–¥—Ä–µ—Å–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ:</b> üõ∏\n{val(logistics_to_addr)}\n\n"
        )

    text += (
        f"<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:</b> üóì\n{val(start_date)}\n\n"
        f"<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã ‚è∞</b>\n{val(start_time)}\n\n"
        f"<b>–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:</b> üí≥\n{val(payment_type)}\n\n"
        f"<b>–û—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏–π—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</b> üë∑\n\n"
        f"<b>–ò–º—è:</b> üìù\n{val(worker_name)}\n\n"
        f"<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> ‚úâÔ∏è\n@{val(worker_username)}\n\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> üì±\n{tel(worker_phone)}\n\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> üìî\n{val(worker_age)}\n"
    )
    return text

# -------------------- /job_form --------------------
@app.route('/job_form')
def job_form():
    telegram_id = request.args.get('telegram')
    role = get_role(telegram_id)
    if role != 'operator':
        return "–¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏", 403
    city_code = "843"
    today = datetime.now()
    job_number = generate_job_number(city_code, today)

    districts = [
        "–í–∞—Ö–∏—Ç–æ–≤—Å–∫–∏–π", "–ê–≤–∏–∞—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π", "–ö–∏—Ä–æ–≤—Å–∫–∏–π",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", "–ù–æ–≤–æ-–°–∞–≤–∏–Ω–æ–≤—Å–∫–∏–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π", "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π"
    ]
    cities = ["–ö–∞–∑–∞–Ω—å"]
    lifts = ["–Ω–µ—Ç", "–¥–∞", "–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"]
    elevator_types = ["–≥—Ä—É–∑–æ–≤–æ–π", "–ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏–π"]
    payment_types = ["–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "–ù–∞–ª–∏—á–Ω—ã–º–∏"]
    logistics_between = ["–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫", "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"]
    logistics_to_addr = ["–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑—á–∏–∫", "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ"]

    return render_template(
        'job_form.html',
        telegram_id=telegram_id,
        job_number=job_number,
        districts=districts,
        cities=cities,
        lifts=lifts,
        elevator_types=elevator_types,
        payment_types=payment_types,
        logistics_between=logistics_between,
        logistics_to_addr=logistics_to_addr
    )

# -------------------- /job_request --------------------
@app.route('/job_request', methods=['POST'])
def job_request():
    try:
        data = request.form
        job_number = data.get('job_number')
        customer_name = data.get('customer_name')
        customer_phone = data.get('customer_phone', '')
        if not customer_phone.isdigit() or len(customer_phone) != 10:
            return jsonify({
                'status': 'error',
                'error': 'customer_phone_invalid',
                'field': 'customer_phone',
                'message': '–í–≤–µ–¥–∏—Ç–µ 10-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞ –±–µ–∑ +7!'
            }), 400

        job_type = data.get('job_type')
        job_description = data.get('job_description', '')
        hour_rate = data.get('hour_rate')
        min_rate = data.get('min_rate')
        city = data.get('city')
        district = data.get('district')
        cargo_name = data.get('cargo_name')
        people_count = data.get('people_count')
        work_hours = data.get('work_hours')
        address_a = data.get('address_a')
        floor_a = data.get('floor_a')
        elevator_a = data.get('elevator_a')
        elevator_type_a = data.get('elevator_type_a')
        address_b = data.get('address_b')
        floor_b = data.get('floor_b')
        elevator_b = data.get('elevator_b')
        elevator_type_b = data.get('elevator_type_b')
        start_date = data.get('start_date')
        start_time = data.get('start_time')
        logistics = data.get('logistics')
        logistics_to_addr = data.get('logistics_to_addr')
        payment_type = data.get('payment_type')
        telegram_id = data.get('telegram_id')

        conn = sqlite3.connect('static/users.db')
        c = conn.cursor()
        c.execute('''
            INSERT INTO jobs (
                job_number, customer_name, customer_phone, job_type, job_description, hour_rate, min_rate, city, district, cargo_name,
                people_count, work_hours, address_a, floor_a, elevator_a, elevator_type_a,
                address_b, floor_b, elevator_b, elevator_type_b, start_date, start_time, logistics, logistics_to_addr, payment_type, status, created_by
            ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
        ''', (
            job_number, customer_name, "+7" + customer_phone, job_type, job_description, hour_rate, min_rate, city, district, cargo_name,
            people_count, work_hours, address_a, floor_a, elevator_a, elevator_type_a,
            address_b, floor_b, elevator_b, elevator_type_b, start_date, start_time, logistics, logistics_to_addr, payment_type,
            "new", telegram_id
        ))
        job_id = c.lastrowid

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–≤—ã–∫–∞–º: skills
        c.execute('SELECT telegram_id, skills FROM users WHERE city=? AND role="worker" AND (mute_mode IS NULL OR mute_mode=0)', (city,))
        workers = c.fetchall()
        sent_count = 0
        errors = []
        sent_to = []

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if job_type == "–ü–æ–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã":
            job_text = build_loader_executor_text(
                job_number=job_number or job_id,
                job_description=job_description,
                hour_rate=hour_rate,
                min_rate=min_rate,
                city=city,
                district=district,
                start_date=start_date,
                start_time=start_time,
                address_a=address_a,
                floor_a=floor_a,
                elevator_a=elevator_a,
                elevator_type_a=elevator_type_a,
                address_b=address_b,
                floor_b=floor_b,
                elevator_b=elevator_b,
                elevator_type_b=elevator_type_b,
                logistics=logistics,
                payment_type=payment_type
            )
        elif job_type == "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã":
            job_text = build_construction_executor_text(
                job_number=job_number or job_id,
                job_description=job_description,
                hour_rate=hour_rate,
                min_rate=min_rate,
                work_hours=work_hours,
                city=city,
                district=district,
                address_a=address_a,
                logistics_to_addr=logistics_to_addr,
                start_date=start_date,
                start_time=start_time,
                payment_type=payment_type
            )
        else:
            job_text = "–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∏–¥ —Ä–∞–±–æ—Ç"

        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data=f"accept_{job_id}"),
            InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è üò¢", callback_data=f"decline_{job_id}")
        )

        for w in workers:
            worker_telegram_id = w[0]
            worker_skills = w[1] or ''
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–≤—ã–∫ –≤—ã–±—Ä–∞–Ω!
            skills_list = [s.strip() for s in worker_skills.split(',') if s.strip()]
            if job_type not in skills_list:
                continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∞–≤—ã–∫
            try:
                # --- –ò–°–ü–†–ê–í–õ–ï–ù–û parse_mode ---
                msg = bot.send_message(worker_telegram_id, job_text, reply_markup=markup, parse_mode="HTML")
                sent_count += 1
                sent_to.append(str(worker_telegram_id))
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ
                c.execute("INSERT INTO job_messages (job_id, telegram_id, message_id) VALUES (?, ?, ?)", (job_id, worker_telegram_id, msg.message_id))
            except Exception as e:
                errors.append({'telegram_id': worker_telegram_id, 'error': str(e)})

        conn.commit()
        conn.close()
        logger.info(f"–ó–∞—è–≤–∫–∞ {job_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {', '.join(sent_to)}")
        if errors:
            logger.warning(f"–û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏: {errors}")
        # –î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ!
        return jsonify({
            'status': 'ok',
            'sent_count': sent_count,
            'errors': errors,
            'message': '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!'
        })
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
        return jsonify({'status': 'error', 'error': str(e), 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏'}), 500

# –î–ª—è –∑–∞—è–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
def send_job_accept_to_operator(job_id, worker_id):
    try:
        conn = sqlite3.connect('static/users.db')
        c = conn.cursor()
        c.execute('SELECT last_name, first_name, middle_name, username, phone, birthdate FROM users WHERE telegram_id=?', (worker_id,))
        worker = c.fetchone()
        c.execute('''SELECT job_number, customer_name, customer_phone, people_count, job_description, hour_rate, min_rate,
                            city, district, address_a, floor_a, elevator_a, elevator_type_a,
                            address_b, floor_b, elevator_b, elevator_type_b, start_date, start_time, logistics, payment_type, created_by
                        FROM jobs WHERE id=?''', (job_id,))
        job = c.fetchone()
        conn.close()
        if worker and job:
            job_number, customer_name, customer_phone, people_count, job_description, hour_rate, min_rate, \
            city, district, address_a, floor_a, elevator_a, elevator_type_a, address_b, floor_b, elevator_b, \
            elevator_type_b, start_date, start_time, logistics, payment_type, operator_id = job
            worker_name = f"{worker[0]} {worker[1]} {worker[2]}"
            worker_username = worker[3]
            worker_phone = worker[4]
            birthdate = worker[5]
            # —Ä–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞
            age = ""
            if birthdate:
                try:
                    from datetime import date
                    bd = datetime.strptime(birthdate, "%Y-%m-%d").date()
                    today = date.today()
                    age = today.year - bd.year - ((today.month, today.day) < (bd.month, bd.day))
                except:
                    age = ""
            operator_text = build_loader_operator_text(
                job_number=job_number,
                customer_name=customer_name,
                customer_phone=customer_phone.replace("+7", ""),
                people_count=people_count,
                job_description=job_description,
                hour_rate=hour_rate,
                min_rate=min_rate,
                city=city,
                district=district,
                address_a=address_a,
                floor_a=floor_a,
                elevator_a=elevator_a,
                elevator_type_a=elevator_type_a,
                address_b=address_b,
                floor_b=floor_b,
                elevator_b=elevator_b,
                elevator_type_b=elevator_type_b,
                logistics=logistics,
                start_date=start_date,
                start_time=start_time,
                payment_type=payment_type,
                worker_name=worker_name,
                worker_username=worker_username,
                worker_phone=worker_phone,
                worker_age=age
            )
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–û parse_mode ---
            bot.send_message(operator_id, operator_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")
# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø—Ä–æ—Ñ–∏–ª—å, –∞–¥–º–∏–Ω–∫–∞ –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

@app.route('/webapp')
def webapp():
    telegram_id = request.args.get('telegram')
    today = date.today().strftime("%Y-%m-%d")
    return render_template('register.html', telegram_id=telegram_id, today=today)

@app.route('/register', methods=['POST'])
def register():
    import re
    import requests
    from telebot.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

    data = request.form
    telegram_id = data.get('telegram_id')
    avatar_file = request.files.get('avatar')

    if not avatar_file or avatar_file.filename.strip() == '':
        return jsonify({'status': 'error', 'error': 'avatar_required', 'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è!'}), 400

    phone = data.get('phone', '')
    if not phone.isdigit() or len(phone) != 10:
        return jsonify({'status': 'error', 'error': 'phone_invalid', 'field': 'phone', 'message': '–í–≤–µ–¥–∏—Ç–µ 10-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!'}), 400

    username = data.get('username', '')
    if not re.fullmatch(r'[a-zA-Z0-9_]{5,32}', username):
        return jsonify({'status': 'error', 'error': 'username_invalid', 'field': 'username', 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username!'}), 400

    avatar_filename = save_avatar(avatar_file, telegram_id)

    last_name = data.get('last_name', '')
    first_name = data.get('first_name', '')
    middle_name = data.get('middle_name', '')
    birthdate = data.get('birthdate', '')
    city = data.get('city', '')
    district = data.get('district', '')
    skills = data.getlist('skills')
    if isinstance(skills, list):
        skills = ', '.join(skills)

    conn = sqlite3.connect('static/users.db')
    c = conn.cursor()
    c.execute('SELECT role FROM users WHERE telegram_id=?', (telegram_id,))
    role = c.fetchone()
    if not role:
        c.execute('''
            INSERT OR REPLACE INTO users (telegram_id, last_name, first_name, middle_name, username, birthdate, city, district, phone, skills, role, avatar, mute_mode, mute_remind_at, mute_remind_stage)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 0, NULL, 0)
        ''', (
            telegram_id,
            last_name,
            first_name,
            middle_name,
            username,
            birthdate,
            city,
            district,
            phone,
            skills,
            'worker',
            avatar_filename
        ))
    else:
        c.execute('''
            UPDATE users SET last_name=?, first_name=?, middle_name=?, username=?, birthdate=?, city=?, district=?, phone=?, skills=?, avatar=? WHERE telegram_id=?
        ''', (
            last_name,
            first_name,
            middle_name,
            username,
            birthdate,
            city,
            district,
            phone,
            skills,
            avatar_filename,
            telegram_id
        ))
    conn.commit()
    conn.close()

    profile_url = f"https://821c5e5165f4.ngrok-free.app/profile/{telegram_id}"

    try:
        # –ú–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (mute_mode == 0)
        reply_markup = {
            "keyboard": [
                [ {"text": "–ë–µ–∑ –∑–≤—É—á–Ω—ã–π —Ä–µ–∂–∏–º üîï"} ],
                [ {
                    "text": "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üóÇ",
                    "web_app": { "url": profile_url }
                } ]
            ],
            "resize_keyboard": True,
            "one_time_keyboard": False
        }
        msg = (
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω üéä\n\n"
            "–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:"
        )
        requests.post(
            f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
            json={
                "chat_id": telegram_id,
                "text": msg,
                "reply_markup": reply_markup
            }
        )
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É:", e)

    return jsonify({'status': 'ok'})

def calc_age(birthdate_str):
    try:
        bdate = datetime.strptime(birthdate_str, "%Y-%m-%d").date()
        today = date.today()
        age = today.year - bdate.year - ((today.month, today.day) < (bdate.month, bdate.day))
        return age
    except Exception:
        return ""

@app.route('/profile/<telegram_id>', methods=['GET'])
def profile(telegram_id):
    conn = sqlite3.connect('static/users.db')
    c = conn.cursor()
    c.execute('SELECT last_name, first_name, middle_name, username, birthdate, city, district, phone, skills, role, avatar FROM users WHERE telegram_id=?', (telegram_id,))
    row = c.fetchone()
    conn.close()
    if row:
        birthdate = row[4]
        age = calc_age(birthdate) if birthdate else ""
        return render_template(
            'profile.html',
            telegram_id=telegram_id,
            last_name=row[0],
            first_name=row[1],
            middle_name=row[2],
            username=row[3],
            birthdate=birthdate,
            age=age,
            city=row[5],
            district=row[6],
            phone=row[7],
            skills=row[8],
            role=row[9],
            avatar=row[10]
        )
    else:
        return "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

@app.route('/edit_profile/<telegram_id>', methods=['POST'])
def edit_profile(telegram_id):
    data = request.form
    avatar_file = request.files.get('avatar')
    avatar_filename = save_avatar(avatar_file, telegram_id) if avatar_file and avatar_file.filename else None
    birthdate = data.get('birthdate', '')
    skills = data.getlist('skills')
    if isinstance(skills, list):
        skills = ', '.join(skills)

    conn = sqlite3.connect('static/users.db')
    c = conn.cursor()
    if avatar_filename:
        c.execute('''
            UPDATE users SET last_name=?, first_name=?, middle_name=?, username=?, birthdate=?, city=?, district=?, phone=?, skills=?, avatar=? WHERE telegram_id=?
        ''', (
            data.get('last_name'),
            data.get('first_name'),
            data.get('middle_name'),
            data.get('username'),
            birthdate,
            data.get('city'),
            data.get('district'),
            data.get('phone'),
            skills,
            avatar_filename,
            telegram_id
        ))
    else:
        c.execute('''
            UPDATE users SET last_name=?, first_name=?, middle_name=?, username=?, birthdate=?, city=?, district=?, phone=?, skills=? WHERE telegram_id=?
        ''', (
            data.get('last_name'),
            data.get('first_name'),
            data.get('middle_name'),
            data.get('username'),
            birthdate,
            data.get('city'),
            data.get('district'),
            data.get('phone'),
            skills,
            telegram_id
        ))
    conn.commit()
    conn.close()
    return redirect(url_for('profile', telegram_id=telegram_id))

@app.route('/admin/users', methods=['GET', 'POST'])
def admin_users():
    telegram_id = request.args.get('telegram')
    if telegram_id != SUPERADMIN_ID:
        return "–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!", 403
    conn = sqlite3.connect('static/users.db')
    c = conn.cursor()
    if request.method == 'POST':
        user_id = request.form['telegram_id']
        role = request.form.get('role', 'operator')
        c.execute('INSERT OR REPLACE INTO users (telegram_id, role) VALUES (?, ?)', (user_id, role))
        conn.commit()
        try:
            requests.post(BOT_ROLE_URL, json={'telegram_id': user_id, 'role': role})
        except Exception:
            pass
    c.execute('SELECT telegram_id, role FROM users WHERE role IN ("operator", "admin")')
    users = c.fetchall()
    conn.close()
    return render_template('users_admin.html', users=users, superadmin_id=SUPERADMIN_ID)

@app.route('/admin/delete_user', methods=['POST'])
def delete_user():
    telegram_id = request.form['telegram_id']
    conn = sqlite3.connect('static/users.db')
    c = conn.cursor()
    c.execute('DELETE FROM users WHERE telegram_id=? AND role IN ("operator", "admin")', (telegram_id,))
    conn.commit()
    conn.close()
    return redirect(url_for('admin_users', telegram=SUPERADMIN_ID))

@app.route('/send_job/<int:job_id>', methods=['POST'])
def send_job(job_id):
    try:
        resp = requests.post(BOT_NOTIFY_URL, json={'job_id': job_id})
        return resp.json()
    except Exception:
        return jsonify({'status': 'fail'})

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)