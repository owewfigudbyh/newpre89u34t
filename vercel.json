import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
import logging
import sys
from datetime import datetime, date, timedelta

# --- logging setup ---
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s:%(name)s: %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
    ]
)
logger = logging.getLogger("blomblom-bot")

TOKEN = "8250860304:AAFbp2PMZom6PbYqvNz_Y1DEQEOSRHeryWU"
WEBAPP_URL = "https://c9434d554543.ngrok-free.app/webapp"
PROFILE_URL = "https://c9434d554543.ngrok-free.app/profile"
JOB_FORM_URL = "https://c9434d554543.ngrok-free.app/job_form"
USERS_ADMIN_URL = "https://c9434d554543.ngrok-free.appadmin/users"
SUPERADMIN_ID = "350691086"

bot = telebot.TeleBot(TOKEN)

def init_db():
    try:
        conn = sqlite3.connect('static/users.db')
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                telegram_id TEXT PRIMARY KEY,
                last_name TEXT,
                first_name TEXT,
                middle_name TEXT,
                username TEXT,
                birthdate TEXT,
                city TEXT,
                district TEXT,
                phone TEXT,
                skills TEXT,
                role TEXT,
                avatar TEXT,
                mute_mode INTEGER DEFAULT 0,
                mute_remind_at TEXT,
                mute_remind_stage INTEGER DEFAULT 0
            )
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS jobs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                job_number TEXT,
                customer_name TEXT,
                customer_phone TEXT,
                job_type TEXT,
                job_description TEXT,
                hour_rate INTEGER,
                min_rate INTEGER,
                city TEXT,
                district TEXT,
                cargo_name TEXT,
                people_count INTEGER,
                address_a TEXT,
                floor_a INTEGER,
                elevator_a TEXT,
                elevator_type_a TEXT,
                address_b TEXT,
                floor_b INTEGER,
                elevator_b TEXT,
                elevator_type_b TEXT,
                start_date TEXT,
                start_time TEXT,
                logistics TEXT,
                payment_type TEXT,
                status TEXT,
                created_by TEXT,
                work_hours INTEGER,
                logistics_to_addr TEXT
            )
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS job_accepts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                job_id INTEGER,
                worker_telegram_id TEXT
            )
        ''')
        c.execute('''
            CREATE TABLE IF NOT EXISTS job_messages (
                job_id INTEGER,
                telegram_id TEXT,
                message_id INTEGER
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("DB initialized successfully")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")

init_db()

def migrate_columns():
    columns_to_add = {
        "jobs": [
            ("logistics_to_addr", "TEXT"),
            ("work_hours", "INTEGER"),
        ],
    }
    for table, cols in columns_to_add.items():
        conn = sqlite3.connect('static/users.db')
        c = conn.cursor()
        c.execute(f"PRAGMA table_info({table})")
        existing = [row[1] for row in c.fetchall()]
        for col, col_type in cols:
            if col not in existing:
                try:
                    c.execute(f"ALTER TABLE {table} ADD COLUMN {col} {col_type}")
                    print(f"–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col} –≤ —Ç–∞–±–ª–∏—Ü—É {table}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ {col} –≤ —Ç–∞–±–ª–∏—Ü—É {table}: {e}")
        conn.commit()
        conn.close()
migrate_columns()

def get_role(telegram_id):
    try:
        conn = sqlite3.connect('static/users.db')
        c = conn.cursor()
        c.execute('SELECT role FROM users WHERE telegram_id=?', (telegram_id,))
        row = c.fetchone()
        conn.close()
        return row[0] if row else None
    except Exception:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        return None

def calc_age(birthdate_str):
    try:
        bdate = datetime.strptime(birthdate_str, "%Y-%m-%d").date()
        today = date.today()
        age = today.year - bdate.year - ((today.month, today.day) < (bdate.month, bdate.day))
        return age
    except Exception:
        return ""

def set_mute_mode(telegram_id):
    now = datetime.now()
    next_remind = now + timedelta(days=1)
    conn = sqlite3.connect('static/users.db')
    c = conn.cursor()
    c.execute('UPDATE users SET mute_mode=1, mute_remind_at=?, mute_remind_stage=1 WHERE telegram_id=?',
              (next_remind.strftime('%Y-%m-%d %H:%M:%S'), telegram_id))
    conn.commit()
    conn.close()

def unset_mute_mode(telegram_id):
    conn = sqlite3.connect('static/users.db')
    c = conn.cursor()
    c.execute('UPDATE users SET mute_mode=0, mute_remind_at=NULL, mute_remind_stage=0 WHERE telegram_id=?', (telegram_id,))
    conn.commit()
    conn.close()

def get_mute_mode(telegram_id):
    try:
        conn = sqlite3.connect('static/users.db')
        c = conn.cursor()
        c.execute('SELECT mute_mode FROM users WHERE telegram_id=?', (telegram_id,))
        row = c.fetchone()
        conn.close()
        return bool(row and row[0])
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ get_mute_mode")
        return False

def main_worker_keyboard(state="normal", profile_url=None):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    if state == "normal":
        markup.add(KeyboardButton("–ë–µ–∑ –∑–≤—É—á–Ω—ã–π —Ä–µ–∂–∏–º üîï"))
        markup.add(KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üóÇ", web_app=WebAppInfo(profile_url)))
    elif state == "mute":
        markup.add(KeyboardButton("–ü–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ ‚úÖ"))
        markup.add(KeyboardButton("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üóÇ", web_app=WebAppInfo(profile_url)))
    return markup

@bot.message_handler(commands=['start'])
def start_message(message):
    try:
        username = message.from_user.username
        telegram_id = str(message.from_user.id)
        display_name = f"@{username}" if username else telegram_id

        role = get_role(telegram_id)
        if not role:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            reg_url = f"{WEBAPP_URL}?telegram={telegram_id}"
            markup.add(KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", web_app=WebAppInfo(reg_url)))
            bot.send_message(
                message.chat.id,
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {display_name}! üëã\n\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä –∑–∞—è–≤–æ–∫ BlomBlom.ru üòÅ\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π, –¥–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                reply_markup=markup
            )
        elif role == 'operator':
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            job_url = f"{JOB_FORM_URL}?telegram={telegram_id}"
            markup.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(job_url)))
            bot.send_message(
                message.chat.id,
                f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.",
                reply_markup=markup
            )
        elif telegram_id == SUPERADMIN_ID:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            users_admin_url = f"{USERS_ADMIN_URL}?telegram={SUPERADMIN_ID}"
            markup.add(KeyboardButton("–ê–¥–º–∏–Ω–∫–∞", web_app=WebAppInfo(users_admin_url)))
            bot.send_message(
                message.chat.id,
                f"–í—ã —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω. –í–æ—Ç –≤–∞—à–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                reply_markup=markup
            )
        elif role == 'worker':
            profile_url = f"{PROFILE_URL}/{telegram_id}"
            mute_mode = get_mute_mode(telegram_id)
            if not mute_mode:
                markup = main_worker_keyboard("normal", profile_url)
            else:
                markup = main_worker_keyboard("mute", profile_url)
            bot.send_message(
                message.chat.id,
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —Å–Ω–æ–≤–∞, {display_name}! üëã\n\n–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
                reply_markup=markup
            )
        else:
            bot.send_message(
                message.chat.id,
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {display_name}! –í–∞—à–∞ —Ä–æ–ª—å: {role}",
                reply_markup=ReplyKeyboardMarkup(resize_keyboard=True)
            )
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ start_message")

@bot.message_handler(content_types=['web_app_data'])
def handle_webapp_callback(message):
    telegram_id = str(message.from_user.id)
    username = message.from_user.username
    display_name = f"@{username}" if username else telegram_id

    role = get_role(telegram_id)
    profile_url = f"{PROFILE_URL}/{telegram_id}"
    mute_mode = get_mute_mode(telegram_id)
    if role == 'worker':
        if not mute_mode:
            markup = main_worker_keyboard("normal", profile_url)
        else:
            markup = main_worker_keyboard("mute", profile_url)
        # –¢–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ –∏ –≤ /start
        bot.send_message(
            message.chat.id,
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ —Å–Ω–æ–≤–∞, {display_name}! üëã\n\n–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
            reply_markup=markup
        )
    else:
        start_message(message)

@bot.message_handler(func=lambda m: m.text == "–ë–µ–∑ –∑–≤—É—á–Ω—ã–π —Ä–µ–∂–∏–º üîï")
def mute_mode_handler(message):
    telegram_id = str(message.from_user.id)
    if not get_mute_mode(telegram_id):
        set_mute_mode(telegram_id)
        profile_url = f"{PROFILE_URL}/{telegram_id}"
        markup = main_worker_keyboard("mute", profile_url)
        bot.send_message(
            message.chat.id,
            '–í—ã –≤–∫–ª—é—á–∏–ª–∏ "–ë–µ–∑ –∑–≤—É—á–Ω—ã–π —Ä–µ–∂–∏–ºüîï"\n–¢–µ–ø–µ—Ä—å –∑–∞—è–≤–∫–∏ –∫ –≤–∞–º –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç üò¢',
            reply_markup=markup
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ë–µ–∑–∑–≤—É—á–Ω—ã–π —Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
        )

@bot.message_handler(func=lambda m: m.text == "–ü–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ ‚úÖ")
def unmute_mode_handler(message):
    telegram_id = str(message.from_user.id)
    if get_mute_mode(telegram_id):
        unset_mute_mode(telegram_id)
        profile_url = f"{PROFILE_URL}/{telegram_id}"
        markup = main_worker_keyboard("normal", profile_url)
        bot.send_message(
            message.chat.id,
            "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–∞—è–≤–∫–∏ ‚úÖ",
            reply_markup=markup
        )
    else:
        bot.send_message(
            message.chat.id,
            "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—Å–µ –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏!"
        )

@bot.message_handler(func=lambda m: m.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üóÇ")
def profile_handler(message):
    telegram_id = str(message.from_user.id)
    profile_url = f"{PROFILE_URL}/{telegram_id}"
    mute_mode = get_mute_mode(telegram_id)
    markup = main_worker_keyboard("normal" if not mute_mode else "mute", profile_url)
    bot.send_message(
        message.chat.id,
        "–û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...",
        reply_markup=markup
    )

@bot.message_handler(commands=['admin'])
def superadmin_panel(message):
    try:
        if str(message.from_user.id) != SUPERADMIN_ID:
            bot.reply_to(message, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω!")
            return
        conn = sqlite3.connect('static/users.db')
        c = conn.cursor()
        c.execute('SELECT telegram_id, role FROM users WHERE role IN ("operator", "admin")')
        users = c.fetchall()
        conn.close()
        text = "–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤:\n"
        for u in users:
            text += f"- {u[0]} —Ä–æ–ª—å: {u[1]}\n"
        text += "\n–î–æ–±–∞–≤–∏—Ç—å: /add_operator <telegram_id> | /add_admin <telegram_id>\n"
        text += "–£–¥–∞–ª–∏—Ç—å: /delete_user <telegram_id>\n"
        bot.send_message(message.chat.id, text)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ admin panel")

@bot.message_handler(commands=['add_operator', 'add_admin'])
def add_user(message):
    try:
        if str(message.from_user.id) != SUPERADMIN_ID:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            return
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_operator <telegram_id> –∏–ª–∏ /add_admin <telegram_id>")
            return
        user_id = parts[1]
        role = "operator" if message.text.startswith('/add_operator') else "admin"
        conn = sqlite3.connect('static/users.db')
        c = conn.cursor()
        c.execute('INSERT OR REPLACE INTO users (telegram_id, role) VALUES (?, ?)', (user_id, role))
        conn.commit()
        conn.close()
        try:
            if role == "operator":
                markup = ReplyKeyboardMarkup(resize_keyboard=True)
                job_url = f"{JOB_FORM_URL}?telegram={user_id}"
                markup.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(job_url)))
                bot.send_message(user_id, "–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.", reply_markup=markup)
            else:
                bot.send_message(user_id, f"–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã {role}–æ–º! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")
        bot.reply_to(message, f"{role.title()} {user_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ add_user")

@bot.message_handler(commands=['delete_user'])
def delete_user_bot(message):
    try:
        if str(message.from_user.id) != SUPERADMIN_ID:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å!")
            return
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete_user <telegram_id>")
            return
        user_id = parts[1]
        conn = sqlite3.connect('static/users.db')
        c = conn.cursor()
        c.execute('DELETE FROM users WHERE telegram_id=? AND role IN ("operator", "admin")', (user_id,))
        conn.commit()
        conn.close()
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω!")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ delete_user_bot")

@bot.message_handler(commands=['add_requests'])
def add_requests(message):
    try:
        user_id = str(message.from_user.id)
        conn = sqlite3.connect('static/users.db')
        c = conn.cursor()
        c.execute('SELECT role FROM users WHERE telegram_id=?', (user_id,))
        row = c.fetchone()
        conn.close()
        if not row or row[0] != 'operator':
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏!")
            return
        job_url = f"{JOB_FORM_URL}?telegram={user_id}"
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(job_url)))
        bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:", reply_markup=markup)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ add_requests")

def accept_job_logic(job_id, worker_id):
    conn = sqlite3.connect('static/users.db')
    c = conn.cursor()
    c.execute("SELECT people_count FROM jobs WHERE id=?", (job_id,))
    row = c.fetchone()
    if not row:
        conn.close()
        return "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    max_count = int(row[0]) if row[0] else 1

    c.execute("SELECT COUNT(*) FROM job_accepts WHERE job_id=?", (job_id,))
    accepted = c.fetchone()[0]

    c.execute("SELECT 1 FROM job_accepts WHERE job_id=? AND worker_telegram_id=?", (job_id, worker_id))
    if c.fetchone():
        conn.close()
        return "–í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —ç—Ç—É –∑–∞—è–≤–∫—É."

    if accepted >= max_count:
        conn.close()
        return "–ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–∞–±—Ä–∞–Ω–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤)."

    c.execute("INSERT INTO job_accepts (job_id, worker_telegram_id) VALUES (?, ?)", (job_id, worker_id))
    conn.commit()
    conn.close()
    return "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É!"

def build_loader_operator_text(
    job_number, customer_name, customer_phone, people_count,
    job_description, hour_rate, min_rate, city, district,
    address_a, floor_a, elevator_a, elevator_type_a,
    address_b=None, floor_b=None, elevator_b=None, elevator_type_b=None,
    logistics=None, start_date=None, start_time=None, payment_type=None,
    worker_name=None, worker_username=None, worker_phone=None, worker_age=None
):
    def val(x):
        return x if x not in [None, ""] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    def tel(x):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –º–æ–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å
        num = str(x).replace("+7", "").replace(" ", "").replace("-", "")
        return f'<a href="tel:+7{num}">+7{num}</a>' if num.isdigit() and len(num) == 10 else val(x)

    text = (
        f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ {val(job_number)}</b> üöÄ\n\n"
        f"<b>–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {val(customer_name)}\n\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {tel(customer_phone)}\n\n"
        f"<b>–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫:</b> {val(people_count)}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:</b> üìù\n{val(job_description)}\n\n"
        f"<b>–°—Ç–∞–≤–∫–∞ –≤ —á–∞—Å:</b> üí∞\n{val(hour_rate)} ‚ÇΩ\n\n"
        f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–º–µ–Ω—É:</b> üí∞\n{val(min_rate)} ‚ÇΩ\n\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> üåÜ\n{val(city)}\n\n"
        f"<b>–†–∞–π–æ–Ω:</b>\n{val(district)}\n\n"
    )

    text += (
        f"<b>–ê–¥—Ä–µ—Å –ê:</b> üìç\n{val(address_a)}\n"
        f"–≠—Ç–∞–∂: {val(floor_a)}\n"
        f"–õ–∏—Ñ—Ç: {val(elevator_a)}\n"
        f"–í–∏–¥ –ª–∏—Ñ—Ç–∞: {val(elevator_type_a)}\n\n"
    )

    if address_b and str(address_b).strip():
        text += (
            f"<b>–ê–¥—Ä–µ—Å B:</b> üìç\n{val(address_b)}\n"
            f"–≠—Ç–∞–∂: {val(floor_b)}\n"
            f"–õ–∏—Ñ—Ç: {val(elevator_b)}\n"
            f"–í–∏–¥ –ª–∏—Ñ—Ç–∞: {val(elevator_type_b)}\n\n"
            f"<b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –º–µ–∂–¥—É –∞–¥—Ä–µ—Å–∞–º:</b> üõ∏\n{val(logistics)}\n\n"
        )

    text += (
        f"<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b> üìÖ\n{val(start_date)}\n\n"
        f"<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b> üïó\n{val(start_time)}\n\n"
        f"<b>–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:</b> üí≥\n{val(payment_type)}\n\n"
    )

    # –ë–ª–æ–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if worker_name:
        text += (
            f"<b>–û—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏–π—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å üßë‚Äçüîß</b>\n\n"
            f"<b>–ò–º—è:</b> üìù\n{val(worker_name)}\n\n"
            f"<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b>\n@{val(worker_username)}\n\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b>\n{tel(worker_phone)}\n\n"
            f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b>\n{val(worker_age)}\n"
        )

    return text

def build_construction_operator_text(
    job_number, customer_name, customer_phone, people_count, job_description,
    hour_rate, min_rate, work_hours, city, district, address_a, logistics_to_addr,
    start_date, start_time, payment_type, worker_name, worker_username, worker_phone, worker_age
):
    def val(v): return v if v not in [None, ""] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    def tel(x):
        num = str(x).replace("+7", "").replace(" ", "").replace("-", "")
        return f'<a href="tel:+7{num}">+7{num}</a>' if num.isdigit() and len(num) == 10 else val(x)

    text = (
        f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ {val(job_number)}</b> üöÄ\n\n"
        f"<b>–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {val(customer_name)}\n\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {tel(customer_phone)}\n\n"
        f"<b>–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫:</b> {val(people_count)}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:</b> üìù\n{val(job_description)}\n\n"
        f"<b>–°—Ç–∞–≤–∫–∞ –≤ —á–∞—Å:</b> üí∞\n{val(hour_rate)} ‚ÇΩ\n\n"
        f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–º–µ–Ω—É:</b> üí∞\n{val(min_rate)} ‚ÇΩ\n\n"
        f"<b>–ö–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:</b> ‚è≥\n{val(work_hours)}\n\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> üèô\n{val(city)}\n\n"
        f"<b>–†–∞–π–æ–Ω:</b>\n{val(district)}\n\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> üìç\n{val(address_a)}\n\n"
    )
    # –ë–ª–æ–∫ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞ –ù–ï –≤—ã–≤–æ–¥–∏—Ç—Å—è!
    text += (
        f"<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:</b> üóì\n{val(start_date)}\n\n"
        f"<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b> ‚è∞\n{val(start_time)}\n\n"
        f"<b>–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:</b> üí≥\n{val(payment_type)}\n\n"
        f"<b>–û—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏–π—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</b> üë∑\n\n"
        f"<b>–ò–º—è:</b> üìù\n{val(worker_name)}\n\n"
        f"<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> ‚úâÔ∏è\n@{val(worker_username)}\n\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> üì±\n{tel(worker_phone)}\n\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> üìî\n{val(worker_age)}\n"
    )
    return text

def build_construction_operator_text_outside_city(
    job_number, customer_name, customer_phone, people_count, job_description,
    hour_rate, min_rate, work_hours, city, district, address_a, logistics_to_addr,
    start_date, start_time, payment_type, worker_name, worker_username, worker_phone, worker_age
):
    def val(v): return v if v not in [None, ""] else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    def tel(x):
        num = str(x).replace("+7", "").replace(" ", "").replace("-", "")
        return f'<a href="tel:+7{num}">+7{num}</a>' if num.isdigit() and len(num) == 10 else val(x)

    text = (
        f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ {val(job_number)}</b> üöÄ\n\n"
        f"<b>–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {val(customer_name)}\n\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑—á–∏–∫–∞:</b> {tel(customer_phone)}\n\n"
        f"<b>–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫:</b> {val(people_count)}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:</b> üìù\n{val(job_description)}\n\n"
        f"<b>–°—Ç–∞–≤–∫–∞ –≤ —á–∞—Å:</b> üí∞\n{val(hour_rate)} ‚ÇΩ\n\n"
        f"<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–º–µ–Ω—É:</b> üí∞\n{val(min_rate)} ‚ÇΩ\n\n"
        f"<b>–ö–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤:</b> ‚è≥\n{val(work_hours)}\n\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> üèô\n{val(city)}\n\n"
        f"<b>–†–∞–π–æ–Ω:</b> \n{val(district)}\n\n"
        f"<b>–ê–¥—Ä–µ—Å:</b> üìç\n{val(address_a)}\n\n"
    )
    # –ë–ª–æ–∫ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –¥–ª—è "–∑–∞ –≥–æ—Ä–æ–¥–æ–º" –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤—Å–µ–≥–¥–∞
    text += (
        f"<b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –¥–æ –∞–¥—Ä–µ—Å–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ:</b> üõ∏\n{val(logistics_to_addr)}\n\n"
        f"<b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:</b> üóì\n{val(start_date)}\n\n"
        f"<b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:</b> ‚è∞\n{val(start_time)}\n\n"
        f"<b>–§–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã:</b> üí≥\n{val(payment_type)}\n\n"
        f"<b>–û—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏–π—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</b> üë∑\n\n"
        f"<b>–ò–º—è:</b> üìù\n{val(worker_name)}\n\n"
        f"<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> ‚úâÔ∏è\n@{val(worker_username)}\n\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> üì±\n{tel(worker_phone)}\n\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> üìî\n{val(worker_age)}\n"
    )
    return text
@bot.callback_query_handler(func=lambda call: call.data.startswith('accept_'))
def accept_job(call):
    try:
        job_id = int(call.data.split('_')[1])
        worker_id = str(call.from_user.id)
        result = accept_job_logic(job_id, worker_id)
        bot.answer_callback_query(call.id, result)
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")

        conn = sqlite3.connect('static/users.db')
        c = conn.cursor()
        c.execute("SELECT people_count FROM jobs WHERE id=?", (job_id,))
        row = c.fetchone()
        max_count = int(row[0]) if row and row[0] else 1
        c.execute("SELECT COUNT(*) FROM job_accepts WHERE job_id=?", (job_id,))
        accepted = c.fetchone()[0]
        if accepted >= max_count:
            c.execute("SELECT telegram_id, message_id FROM job_messages WHERE job_id=?", (job_id,))
            all_msgs = c.fetchall()
            for tg_id, msg_id in all_msgs:
                try:
                    bot.delete_message(tg_id, msg_id)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É —É {tg_id}: {e}")
        conn.close()

        if result == "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É!":
            conn = sqlite3.connect('static/users.db')
            c = conn.cursor()
            c.execute(
                'SELECT last_name, first_name, middle_name, username, phone, city, district, skills, birthdate FROM users WHERE telegram_id=?',
                (worker_id,))
            worker = c.fetchone()
            c.execute('''SELECT job_number, customer_name, customer_phone, job_type, job_description, hour_rate, min_rate,
                                city, district, address_a, floor_a, elevator_a, elevator_type_a,
                                address_b, floor_b, elevator_b, elevator_type_b, start_date, start_time, logistics, payment_type, people_count, work_hours, logistics_to_addr, created_by
                         FROM jobs WHERE id=?''', (job_id,))
            job = c.fetchone()
            conn.close()
            if not worker or not job:
                logger.error(f"worker or job –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: job={job}")
                return

            operator_id = job[24]  # created_by

            if not operator_id:
                logger.error(f"–ü—É—Å—Ç–æ–π created_by –¥–ª—è job_id={job_id}")
                return
            try:
                birthdate = worker[8]
                age = calc_age(birthdate) if birthdate else "‚Äî"
                worker_name = f"{worker[0]} {worker[1]} {worker[2]}"
                worker_username = worker[3]
                worker_phone = worker[4]

                job_type = job[3]
                jt = job_type.strip().lower()
                if jt == "–ø–æ–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã":
                    show_address_b = bool(job[13] and str(job[13]).strip())
                    operator_text = build_loader_operator_text(
                        job_number=job[0],
                        customer_name=job[1],
                        customer_phone=job[2],
                        people_count=job[21],
                        job_description=job[4],
                        hour_rate=job[5],
                        min_rate=job[6],
                        city=job[7],
                        district=job[8],
                        address_a=job[9],
                        floor_a=job[10],
                        elevator_a=job[11],
                        elevator_type_a=job[12],
                        address_b=job[13] if show_address_b else None,
                        floor_b=job[14] if show_address_b else None,
                        elevator_b=job[15] if show_address_b else None,
                        elevator_type_b=job[16] if show_address_b else None,
                        logistics=job[19] if show_address_b else None,
                        start_date=job[17],
                        start_time=job[18],
                        payment_type=job[20],
                        worker_name=worker_name,
                        worker_username=worker_username,
                        worker_phone=worker_phone,
                        worker_age=age
                    )
                elif jt == "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã":
                    logistics_to_addr = job[23]
                    work_hours = job[22]
                    if logistics_to_addr and str(logistics_to_addr).strip():
                        operator_text = build_construction_operator_text_outside_city(
                            job_number=job[0],
                            customer_name=job[1],
                            customer_phone=job[2],
                            people_count=job[21],
                            job_description=job[4],
                            hour_rate=job[5],
                            min_rate=job[6],
                            work_hours=work_hours,
                            city=job[7],
                            district=job[8],
                            address_a=job[9],
                            logistics_to_addr=logistics_to_addr,
                            start_date=job[17],
                            start_time=job[18],
                            payment_type=job[20],
                            worker_name=worker_name,
                            worker_username=worker_username,
                            worker_phone=worker_phone,
                            worker_age=age
                        )
                    else:
                        operator_text = build_construction_operator_text(
                            job_number=job[0],
                            customer_name=job[1],
                            customer_phone=job[2],
                            people_count=job[21],
                            job_description=job[4],
                            hour_rate=job[5],
                            min_rate=job[6],
                            work_hours=job[22],
                            city=job[7],
                            district=job[8],
                            address_a=job[9],
                            logistics_to_addr=job[23],  # <-- –¥–æ–±–∞–≤–ª–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç!
                            start_date=job[17],
                            start_time=job[18],
                            payment_type=job[20],
                            worker_name=worker_name,
                            worker_username=worker_username,
                            worker_phone=worker_phone,
                            worker_age=age
                        )
                else:
                    operator_text = "–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç"

                bot.send_message(operator_id, operator_text, parse_mode="HTML")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}: {e}")
        logger.info(f"–ó–∞—è–≤–∫–∞ {job_id} –ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {worker_id}")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏")
@bot.callback_query_handler(func=lambda call: call.data.startswith('decline_'))
def decline_job(call):
    try:
        bot.answer_callback_query(call.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞—è–≤–∫–∏")
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è: {e}")
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –∑–∞—è–≤–∫–∏")

if __name__ == "__main__":
    bot.polling(none_stop=True)